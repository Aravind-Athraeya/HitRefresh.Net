window.location /window.setInterval
XMLHttpRequest
prototypal inheritance
prototype in javascript *The JavaScript prototype property allows you to add new properties to object constructor -https://www.w3schools.com/js/js_object_prototypes.asp*
https://medium.com/backticks-tildes/javascript-prototypes-ee46810e4866
JS types combos:
https://www.w3schools.com/js/js_output.asp
Number + Number -> Addition
Boolean + Number -> Addition
Boolean + Number -> Addition
Number + String -> Concatenation
String + Boolean -> Concatenation
String + String -> Concatenation
If you re-declare a JavaScript variable, it will not lose its existing value.
Hoisting: Its declared but not initialized -- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var
JavaScript evaluates expressions from left to right. so 16 + 4 + "Volvo"; will produce 20Volvo while  "Volvo" + 16 + 4 will produce Volvo164
You can use quotes inside a string, as long as they don't match the quotes surrounding the string:
Unfortunately, in JavaScript, the data type of null is an object.You can consider it a bug in JavaScript that typeof null is an object. It should be null.
Difference Between Undefined and Null --https://flexiple.com/undefined-vs-null-javascript/
If you access a method without the () parentheses, it will return the function definition
=== VS == 

var x = "John";             
var y = new String("John");
var z = new String("John");
String primitives vs string objects  --https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
--String primitives and String objects also give different results when using eval().
Primitives passed to eval are treated as source code; String objects are treated as all other objects are, by returning the object.
// (x == y) is true because x and y have equal values
// (x === y) is false because x and y have different types (string and object)
// (z == y) is false because x and y are different objects
// (z === y) is false because x and y are different objects
indexOf() VS search()--  search + start length VS search + regex
Substring VS slice - Slice will cut and negative values with trim from oher side of string vs if lenth is grater it will be swapper(begin and end indexs)
JavaScript will try to convert strings to numbers in all numeric operations
Event loop in JS: 
Infinity, NaN = type number -Any operation with Nan returns Nan
parseInt("10 20 30");   // returns 10
parseInt("10 years");   // returns 10
parseInt("years 10");   // returns NaN 
The Difference Between Arrays and Objects -Ans: Named indexes VS Numbered indexes
shift VS pop -- Shift front remove and returns the removed item while pop removes the last item
Array - Push, Pop,shift(removed from front), Slice(make new array from given element. Makes a copy does not remove), Splice(remove from array)
Array.map/ reduce /filter /every /some --https://www.freecodecamp.org/news/javascript-map-reduce-and-filter-explained-with-examples/
Switch cases use strict comparison (===).The values must be of the same type to match.
Number("99 88")   // returns NaN
PasseInt("99 88")   // returns 99
If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.
Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope
let/const/ block scope
var vs let difference in javascript -- hosiing in var, block vs function scope, redecalre var
The super() method refers to the parent class.
JavaScript behavior to close a statement automatically at the end of a line.
JavaScript function closures - https://www.youtube.com/watch?v=FYrtnS3X_Lw
https://youtu.be/wfMtDGfHWpA - INheritance VS Composition
https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript
**arrrow function and promise**
https://web.dev/promises/
